
type Order @model {
    id: ID!
    name: String!
    status: Int!
    deadline: DateTime!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
    pantry: Pantry! @hasOne
    requests: [Request!]! @hasMany
    user: User! @belongsTo
}

enum OrderStatus {
    COMPLETED @enum(value: 0)
    ACTIVE @enum(value: 1)
}

input CreateOrderInput {
    name: String! @rules(
        apply: ["required"],
        messages: { required: "El campo es requerido."}
    )
    deadline: Date! @rules(
        apply: ["required", "date"],
        messages: {
            required: "El campo es requerido.",
            date: "No es una fecha valida."
        }
    )
}

extend type Query {
    orders(orderBy: [OrderByClause!] @orderBy): [Order!]! @all
    order(id: ID! @globalId(decode: "ID") @eq @rules(
        apply: ["required"],
        messages: { required: "El campo es requerido"}
      )
    ): Order! @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createOrder(input: CreateOrderInput! @spread): Order @can(ability: "create", model: "Order") @field(resolver: "OrderMutator@create")
}
