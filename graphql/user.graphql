
type User @model {
    id: ID! @globalId
    name: String!
    email: String!
    password: String!
    type: Int!
    created_at: DateTime!
    updated_at: DateTime!
    requests: [Request!]! @hasMany
}

enum UserType {
    SUPERUSER @enum(value: 0)
    ADMIN @enum(value: 1)
    CLIENT @enum(value: 2)
}

input CreateUserInput {
    name: String!
    email: String!
    password: String! @bcrypt
    type: Int!
}

extend type Query {
    me: User! @middleware(checks:["auth:api"]) @auth
    users: [User!]! @all
    user(id: ID! @globalId(decode: "ID") @eq): User! @find
}

extend type Mutation {
    createUser(input: CreateUserInput! @spread): User! @create
}
