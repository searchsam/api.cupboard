
type Request @model {
    id: ID!
    description: String!
    quantity: String!
    status: Int
    createdAt: DateTime!
        @rename(attribute: "created_at")
    updatedAt: DateTime!
        @rename(attribute: "updated_at")
    order: Order! @hasOne
    user: User! @belongsTo
}

input CreateRequestInput {
    description: String!
        @rules(
            apply: ["required"],
            messages: { required: "El campo es requerido"}
        )
    quantity: String!
        @rules(
            apply: ["required"],
            messages: { required: "El campo es requerido"}
        )
    order: ID! @globalId(decode: "ID")
        @rules(
            apply: ["required"],
            messages: { required: "El campo es requerido"}
        )
}

extend type Query @middleware(checks: ["auth:api"]) {
    requests(
        order_id: ID!
            @globalId(decode: "ID")
            @eq
            @rules(
                apply: ["required"],
                messages: { required: "El campo es requerido"}
            )
        orderBy: [OrderByClause!] @orderBy
    ): [Request!]! @all
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createRequest(input: CreateRequestInput! @spread): Request
        @can(ability: "create", model: "Request")
        @field(resolver: "RequestMutator@create")
    denyRequest(
        id: ID!
            @globalId(decode: "ID")
            @eq
            @rules(
                apply: ["required"],
                messages: { required: "El campo es requerido"}
            )
    ): Request
        @field(resolver: "RequestMutator@deny")
    approveRequest(
        id: ID!
            @globalId(decode: "ID")
            @eq
            @rules(
                apply: ["required"],
                messages: { required: "El campo es requerido"}
            )
    ): Request
        @field(resolver: "RequestMutator@approve")
}
